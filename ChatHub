using System;                                                                   //This class represents the server side functions for SignalR (instant messaging)
using System.Collections.Generic;                                               //NOTE: Functions are named in this c# class in normal PascalCase naming convention
using System.Linq;                                                              //And are called using camelCase from javascript on the Views pages. This is a 
using System.Web;                                                               //functionality of SignalR. -PC/Note
using Microsoft.AspNet.SignalR;

namespace ManagementPortal.Models
{                                                                               //installed Install-Package Microsoft.AspNet.SignalR -Version 2.4.1
    public class ChatHub : Hub
    {
        //When message is sent, it is stored in database,
        public void SendMessage(string message)
        {
            string userName = Context.User.Identity.Name;                       //Gets the user name of the person who sent the message
            if (userName == "" || string.IsNullOrEmpty(message)) { return; }    //If user is not logged in or sends blank message, end function.

            using (var context = new ApplicationDbContext())                    //Opens connection to database
            {
                var chatMessage = new ChatMessage();                            //Chat message object to be populated and passed to table
                chatMessage.Date = DateTime.Now;
                chatMessage.ChatMessageId = Guid.NewGuid();         
                chatMessage.Sender = userName;
                chatMessage.Message = message;

                context.ChatMessages.Add(chatMessage);                          //Adds chat message object to the chat message table, then closes connection
                context.SaveChanges();
            }

            //populate new messaeg then open chat for any other logged on users, and clear chat box for sender
            Clients.All.receiveMessage(userName, message);
            Clients.Others.launchChat();
            Clients.Caller.clearChat();
        }


        //On page load, gets messages from database and sends them to user
        public void GetMessages()
        {
            List<MessageObject> messageList = new List<MessageObject>();
            using (var context = new ApplicationDbContext())
            {
                var messageQuery = from m in context.ChatMessages                                       
                                   orderby m.Date descending                                            
                                   select m;

                foreach (ChatMessage databaseMessage in messageQuery)
                {
                    MessageObject newMessage = new MessageObject();
                    newMessage.UserName = databaseMessage.Sender;
                    newMessage.Message = databaseMessage.Message;
                    
                    messageList.Add(newMessage);
                }
            }
            Clients.Caller.populateMessages(messageList);
        }
        
        //This class is similar to a viewmodel. Feel free to refactor this into the models folder. Date is not currently being used, but could be implemented into chat modal!
        public class MessageObject
        {
            public string UserName  { get; set; }
            public string Message { get; set; }
            public DateTime Date { get; set; }
        }
    }
}
